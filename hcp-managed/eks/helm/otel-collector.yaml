mode: deployment
replicaCount: 1

presets:
  # Sets up a receiver to collect cluster-level metrics from the Kubernetes API server. 
  # These metrics include many of the metrics collected by Kube State Metrics.
  #clusterMetrics:
    #enabled: true
  # Adds Kubernetes metadata to logs, metrics and traces.
  #kubernetesAttributes:
    #enabled: true
  # Sets up a receiver to collect logs sent to standard output by Kubernetes containers.
  logsCollection:
    enabled: true
  # Sets up a receiver to collect host metrics from Kubernetes nodes.
  #hostMetrics:
    #enabled: true

config:
  # Receivers: How data gets into OTel collector
  receivers:
    # Manual jaeger traces config
    jaeger:
      protocols:
        grpc:
          endpoint: ${env:MY_POD_IP}:14250
        thrift_compact:
          endpoint: ${env:MY_POD_IP}:6831
        thrift_http:
          endpoint: ${env:MY_POD_IP}:14268
    # Manual zipkin traces config
    zipkin:
      endpoint: ${env:MY_POD_IP}:9411
    # Manual otlp traces config
    otlp:
      protocols:
        grpc:
          endpoint: ${env:MY_POD_IP}:4317
        http:
          endpoint: ${env:MY_POD_IP}:4318
    # Manual prometheus metrics scraping (pull-based) config
    #prometheus:
      #config:
        #scrape_configs:
          #- job_name: otel-collector
            #scrape_interval: 10s
            #static_configs:
              #- targets:
                  #- ${env:MY_POD_IP}:8888
  # Processors: Operations run on data between being received and being exported                
  #processors:
    #batch: {}
    #memory_limiter:
      #check_interval: 5s
      #limit_percentage: 80
      #spike_limit_percentage: 25
  # Exporters: How data gets from OTel collector to a destination
  exporters:
    # Data sources: logs
    loki:
      endpoint: http://loki.observability.svc.cluster.local:3100/loki/api/v1/push
    #otlp:
      #endpoint: otelcol:4317
    # Data sources: traces
    #jaeger:
      #endpoint: tempo.observability.svc.cluster.local:3100/
      #endpoint: jaeger-all-in-one:14250
      #namespace: observability
    # Data sources: metrics
    #prometheus:
      #endpoint:
      #endpoint: prometheus:8889
      #namespace: observability
    # Data sources: metrics
    #prometheusremotewrite:
      #endpoint: http://prometheus-server.observability.svc.cluster.local:80/api/prom/push
      #endpoint: http://prometheus-pushgateway.observability.svc.cluster.local:9091/api/v1/write
    # Data sources: traces
    #zipkin:
      #endpoint: http://localhost:9411/api/v2/spans
      #endpoint: http://tempo.grafana.svc.cluster.local:14250
  # Extensions: (Optional) Extra functionality
  #extensions:
    #health_check: {}
    #memory_ballast:
      #size_in_percentage: 40
    #pprof: {}
  service:
    #extensions:
      #- health_check
      #- memory_ballast
      #- pprof
    # Pipelines: Which receivers go to which exporters?
    pipelines:
      #metrics:
        #receivers:
          #- prometheus
        #processors:
          #- memory_limiter
          #- batch
        #exporters:
          #- prometheus
      logs:
        #receivers:
          #- loki
        #processors:
          #- memory_limiter
          #- batch
        exporters:
          - loki
      #traces:
        #exporters:
          #- tempo
        #processors:
          #- memory_limiter
          #- batch
        #receivers:
          #- otlp
          #- jaeger
          #- zipkin
    #telemetry:
      #metrics:
        #address: ${env:MY_POD_IP}:8888