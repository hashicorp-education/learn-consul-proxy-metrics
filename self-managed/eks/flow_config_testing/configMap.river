//Metrics and Logs scraping sources
discovery.kubernetes "discover_pods" {
  //Type of k8s resource to scrape (pod, service, etc)
  role = "pod"
  namespaces {
    //Search within the same namespace Grafana agent is in?
    own_namespace = false
    //Namespaces to search
    names         = ["default","kube-system","consul"]
    }
}
//Metrics scraping forwarder
prometheus.scrape "scrape_pods" {
  targets    = discovery.kubernetes.discover_pods.targets
  forward_to = [prometheus.remote_write.mimir_server.receiver]
}
//Logs scraping forwarder
loki.source.kubernetes "pods" {
  targets    = discovery.kubernetes.discover_pods.targets
  forward_to = [loki.write.loki_server.receiver]
}
//Metrics scraping destinations
prometheus.remote_write "mimir_server" {
  endpoint {
    url = "http://mimir-gateway.grafana.svc.cluster.local:80/api/v1/push"
  }
}
//Logs scraping destinations
loki.write "loki_server" {
  endpoint {
    url = "http://loki.grafana.svc.cluster.local:3100/loki/api/v1/push"
  }
}
// Distributed Traces receiver and forwarder
otelcol.receiver.jaeger "jaeger_traces" {
  protocols {
    grpc {
      endpoint = "0.0.0.0:14250" 
    }
    thrift_http {
      endpoint = "0.0.0.0:14268" 
    }
    thrift_binary {
      endpoint = "0.0.0.0:6832" 
    }
    thrift_compact {
      endpoint = "0.0.0.0:6831" 
    }
  }
  output {
    traces = [otelcol.processor.batch.default.input]
  }
}
otelcol.processor.batch "default" {
  output {
    traces = [otelcol.exporter.jaeger.tempo.input]
  }
}
otelcol.exporter.jaeger "tempo" {
  client {
    endpoint = "tempo.grafana.svc.cluster.local:14250"
    #endpoint = "tempo.grafana.svc.cluster.local:4317"
    tls {
        insecure             = true
        insecure_skip_verify = true
    }
  }
}

//Grafana Agent logging and tracing
logging {
  level  = "info"
  format = "logfmt"
}
tracing {
  sampling_fraction = 0.1

  write_to = [otelcol.exporter.jaeger.tempo.input]
}